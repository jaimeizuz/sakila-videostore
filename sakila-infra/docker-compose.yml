services:
  sakila-videostore-processes-workflows:
    container_name: sakila-videostore-processes-workflows
    image: 'jizuzquiza/sakila-videostore-processes-workflows:0.0.1'
    profiles:
      - full
      - workflows
    ports:
      - '8080:8080'
      - '8083:8083'
    environment:
      QUARKUS_HTTP_CORS_ORIGINS: /.*/
      QUARKUS_DATASOURCE_JDBC_URL: 'jdbc:postgresql://postgres:5432/kogito'
      QUARKUS_DATASOURCE_REACTIVE_URL: 'postgresql://postgres:5432/kogito'
      QUARKUS_DATASOURCE_USERNAME: kogito-user
      QUARKUS_DATASOURCE_PASSWORD: kogito-pass
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      QUARKUS_REST_CLIENT__SAKILA-VIDEOSTORE-REST_SERVICES_URL__URL: http://sakila-videostore-rest-services-server:8080
      KOGITO_JOBS_SERVICE_URL: 'http://localhost:8080'
      KOGITO_JOBS-SERVICE_URL: 'http://localhost:8080'
      KOGITO_SERVICE_URL: 'http://sakila-videostore-processes-workflows:8080'
      KOGITO_DATAINDEX_HTTP_URL: 'http://kogito-data-index:8080'
      QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://opentelemetry-collector:4317
      QUARKUS_MICROMETER_EXPORT_OTLP_URL: http://opentelemetry-collector:4318
      QUARKUS_DATASOURCE_JDBC_TELEMETRY: "true"
      QUARKUS_DATASOURCE_JDBC_TRACING: "true"
      QUARKUS_LOG_HANDLER_GELF_ENABLED: "true"
      QUARKUS_LOG_HANDLER_GELF_HOST: logstash
      QUARKUS_LOG_HANDLER_GELF_PORT: 12201
      QUARKUS_LOG_HANDLER_GELF_INCLUDE_FULL_MDC: "true"
    depends_on:
      postgres:
        condition: service_healthy
  sakila-videostore-rest-services-server:
    container_name: sakila-videostore-rest-services-server
    image: 'jizuzquiza/sakila-videostore-rest-services-server:0.0.1'
    profiles:
      - full
      - business-services
    ports:
      - '18081:8080'
    environment:
      QUARKUS_HTTP_CORS_ORIGINS: /.*/
      QUARKUS_DATASOURCE_JDBC_URL: 'jdbc:mysql://mysql-server:3306/sakila'
      QUARKUS_DATASOURCE_REACTIVE_URL: 'mysql://mysql-server:3306/sakila'
      QUARKUS_DATASOURCE_USERNAME: sakilauser
      QUARKUS_DATASOURCE_PASSWORD: Password@1!
      QUARKUS_DATASOURCE_DB_KIND: mysql
      QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://opentelemetry-collector:4317
      QUARKUS_MICROMETER_EXPORT_OTLP_URL: http://opentelemetry-collector:4318
      QUARKUS_DATASOURCE_JDBC_TELEMETRY: "true"
      QUARKUS_DATASOURCE_JDBC_TRACING: "true"
      QUARKUS_LOG_HANDLER_GELF_ENABLED: "true"
      QUARKUS_LOG_HANDLER_GELF_HOST: logstash
      QUARKUS_LOG_HANDLER_GELF_PORT: 12201
  kogito-data-index:
    container_name: kogito-data-index
    image: apache/incubator-kie-kogito-data-index-postgresql:main
    profiles:
      - full
      - kogito-services
    ports:
      - "8180:8080"
    depends_on:
      redpanda:
        condition: service_started
      postgres:
        condition: service_healthy
    volumes:
      - ./target/protobuf:/home/kogito/data/protobufs/
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgres:5432/kogito"
      QUARKUS_DATASOURCE_USERNAME: kogito-user
      QUARKUS_DATASOURCE_PASSWORD: kogito-pass
      KAFKA_BOOTSTRAP_SERVERS: redpanda:9093
      QUARKUS_HTTP_CORS_ORIGINS: "/.*/"
      KOGITO_DATA_INDEX_PROPS: -Dquarkus.hibernate-orm.database.generation=update
  kogito-jobs-service:
    container_name: kogito-jobs-service
    image: apache/incubator-kie-kogito-jobs-service-postgresql:main
    profiles:
      - full
      - kogito-services
    ports:
      - 13004:8080
    depends_on:
      kogito-data-index:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: 'jdbc:postgresql://postgres:5432/kogito'
      QUARKUS_DATASOURCE_REACTIVE_URL: 'postgresql://postgres:5432/kogito'
      QUARKUS_DATASOURCE_USERNAME: kogito-user
      QUARKUS_DATASOURCE_PASSWORD: kogito-pass
      QUARKUS_DATASOURCE_DB_KIND: postgresql
  kogito-management-console:
    container_name: kogito-management-console
    image: apache/incubator-kie-kogito-management-console:main
    profiles:
      - full
      - kogito-consoles
    ports:
      - '8280:8080'
    depends_on:
      keycloak:
        condition: service_healthy
    volumes:
      - './svg/:/home/kogito/data/svg/'
    environment:
      RUNTIME_TOOLS_MANAGEMENT_CONSOLE_KOGITO_ENV_MODE: PROD
      RUNTIME_TOOLS_MANAGEMENT_CONSOLE_DATA_INDEX_ENDPOINT: 'http://localhost:8180/graphql'
      KOGITO_CONSOLES_KEYCLOAK_HEALTH_CHECK_URL: >-
        http://localhost:8480/auth/realms/kogito/.well-known/openid-configuration
      KOGITO_CONSOLES_KEYCLOAK_URL: 'http://localhost:8480/auth'
      KOGITO_CONSOLES_KEYCLOAK_REALM: kogito
      KOGITO_CONSOLES_KEYCLOAK_CLIENT_ID: kogito-console-quarkus
  kogito-task-console:
    container_name: kogito-task-console
    image: apache/incubator-kie-kogito-task-console:main
    profiles:
      - full
      - kogito-consoles
    ports:
      - '8380:8080'
    depends_on:
      keycloak:
        condition: service_healthy
    environment:
      RUNTIME_TOOLS_TASK_CONSOLE_KOGITO_ENV_MODE: PROD
      RUNTIME_TOOLS_TASK_CONSOLE_DATA_INDEX_ENDPOINT: 'http://localhost:8080/graphql'
      KOGITO_CONSOLES_KEYCLOAK_HEALTH_CHECK_URL: >-
        http://localhost:8480/auth/realms/kogito/.well-known/openid-configuration
      KOGITO_CONSOLES_KEYCLOAK_URL: 'http://localhost:8480/auth'
      KOGITO_CONSOLES_KEYCLOAK_REALM: kogito
      KOGITO_CONSOLES_KEYCLOAK_CLIENT_ID: kogito-console-quarkus
  postgres:
    container_name: postgres
    image: 'postgres:16.1-alpine3.19'
    profiles:
      - infra
      - example
      - full
      - kogito-database
    ports:
      - '5432:5432'
    volumes:
      - './sql:/docker-entrypoint-initdb.d:Z'
    healthcheck:
      test:
        - CMD
        - pg_isready
        - '-q'
        - '-d'
        - kogito
        - '-U'
        - kogito-user
      timeout: 45s
      interval: 10s
      retries: 50
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
  mysql-server:
    container_name: mysql
    image: jizuzquiza/mysql:8.0.16
    profiles:
      - full
      - business-database
    environment:
      MYSQL_ROOT_PASSWORD: password@1
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
    - 3307:3306
  keycloak:
    container_name: keycloak
    image: 'quay.io/keycloak/keycloak:legacy'
    profiles:
      - full
      - kogito-consoles
    ports:
      - '8480:8080'
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - './keycloak/kogito-realm.json:/tmp/kogito-realm.json'
    healthcheck:
      test:
        - CMD
        - curl
        - '-f'
        - 'http://localhost:8080/auth/realms/kogito'
      interval: 2s
      timeout: 1s
      retries: 50
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: kogito-user
      DB_SCHEMA: public
      DB_PASSWORD: kogito-pass
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_IMPORT: /tmp/kogito-realm.json
  redpanda:
    container_name: redpanda
    image: redpandadata/redpanda:v24.2.4
    profiles:
      - messaging-redpanda
    ports:
      - 14001:8081
      - 14002:8082
      - 9092:9092
      - 28082:28082
      - 29092:2909
      - 9093:9093
      - 9644:9644
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    command:
    - redpanda
    - start
    - --smp
    - '6'
    - --reserve-memory
    - 0M
    - --overprovisioned
    - --node-id
    - '0'
    - --kafka-addr
    - PLAINTEXT://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
    - --advertise-kafka-addr
    - PLAINTEXT://redpanda:9093,OUTSIDE://localhost:9092
    - --pandaproxy-addr
    - PLAINTEXT://0.0.0.0:28082,OUTSIDE://0.0.0.0:8082
    - --advertise-pandaproxy-addr
    - PLAINTEXT://redpanda:28082,OUTSIDE://localhost:8082
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/brokers" ]
      interval: 1s
      timeout: 1s
      retries: 50
  redpanda-console:
    container_name: redpanda-console
    image: redpandadata/console:v2.7.2
    profiles:
      - messaging-redpanda
    # mount the local directory that contains your license key to the container.
    # give Redpanda Console read access to the license.
    volumes:
      - ./license:/etc/redpanda:ro
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml && echo "$$CONSOLE_ROLEBINDINGS_CONFIG_FILE" > /tmp/role-bindings.yml && /app/console'
    environment:
      #REDPANDA_LICENSE_FILEPATH: /etc/redpanda/redpanda.license
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9093"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        login:
          enabled: false
          jwtSecret: change-this-to-something-secret
          useSecureCookies: false
          plain:
            enabled: true
            credentials:
            - username: "jdoe"
              password: "jdoe"
            - username: "john"
              password: "some-secret-password"
        enterprise:
          rbac:
            enabled: false
            roleBindingsFilepath: /tmp/role-bindings.yml
      CONSOLE_ROLEBINDINGS_CONFIG_FILE: |
        roleBindings:
        - metadata:
            name: Platform Ops
          subjects:
            - kind: user
              provider: Plain
              name: jdoe
          roleName: admin
        - metadata:
            name: Software Engineers
          subjects:
            - kind: user
              provider: Plain
              name: john
          roleName: editor
    ports:
      - 9001:8080
    depends_on:
      - redpanda
  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop:4.0.2
    profiles:
      - messaging-redpanda-kafdrop
    depends_on:
      - redpanda
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "redpanda:9093"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
  jaeger:
    container_name: jaeger
    image: 'jaegertracing/all-in-one:${JAEGER_IMAGE_TAG:-latest}'
    profiles:
      - full
      - monitoring
    volumes:
      - './jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json'
    command: '--query.ui-config /etc/jaeger/jaeger-ui.json'
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - 'PROMETHEUS_SERVER_URL=http://prometheus:9090'
      - >-
        PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=${PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR:-true}
      - 'PROMETHEUS_QUERY_NAMESPACE=${PROMETHEUS_QUERY_NAMESPACE:-}'
      - 'PROMETHEUS_QUERY_DURATION_UNIT=${PROMETHEUS_QUERY_DURATION_UNIT:-}'
      - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
      - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
    ports:
      - '16686:16686'
      - '14268'
      - '14269:14269'
      - '14250'
  otel_collector:
    container_name: opentelemetry-collector
    image: 'otel/opentelemetry-collector-contrib:latest'
    profiles:
      - full
      - monitoring
    volumes:
      - >-
        ./opentelemetry/otel-collector-config.yaml:/etc/otelcol/otel-collector-config.yaml
    command: '--config=/etc/otelcol/otel-collector-config.yaml'
    ports:
      - '13133:13133'
      - '4317:4317'
      - '4318:4318'
      - '15680:55680'
    depends_on:
      - jaeger
  microsim:
    container_name: microsim
    image: 'yurishkuro/microsim:0.3.0'
    profiles:
      - microsim
    command: '-j http://otel_collector:14278/api/traces -d 24h -s 500ms'
    depends_on:
      - otel_collector
  prometheus:
    container_name: prometheus
    image: 'prom/prometheus:latest'
    profiles:
      - full
      - monitoring
    volumes:
      - './prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
  grafana:
    container_name: grafana
    image: 'grafana/grafana:latest'
    profiles:
      - full
      - monitoring
    volumes:
      - './grafana/grafana.ini:/etc/grafana/grafana.ini'
      - >-
        ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - '3000:3000'
  elasticsearch:
    container_name: elasticsearch
    image: docker.io/elastic/elasticsearch:8.15.0
    profiles:
      - elk
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      discovery.type: "single-node"
      xpack.security.enabled: "false"
      cluster.routing.allocation.disk.threshold_enabled: false
  logstash:
    container_name: logstash
    image: docker.io/elastic/logstash:8.15.0
    profiles:
      - elk
    environment:
      monitoring.elasticsearch.hosts: http://elasticsearch-host:9200
    volumes:
      - source: ./logstash/pipelines
        target: /usr/share/logstash/pipeline
        type: bind
    ports:
      - "12201:12201/udp"
      - "5000:5000"
      - "9600:9600"
    depends_on:
      - elasticsearch
  kibana:
    container_name: kibana
    image: docker.io/elastic/kibana:8.15.0
    profiles:
      - elk
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
  wiremock-studio:
    image: jizuzquiza/wiremock-studio:2.32.0-18
    profiles:
      - mock-server
    volumes:
      - ./wiremock-data-storage:/home/wiremock
    ports:
    - 19000-19010:9000-9010

volumes:
    mysql_data: {}
    redpanda_data: {}